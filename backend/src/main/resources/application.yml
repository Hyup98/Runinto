spring:
  #세션용 Redis-
  session:
    store-type: redis
    redis:
      host: localhost
      port: 6379

  #캐시용 Redis
  cache:
    redis:
      host: localhost
      port: 6380

  jwt:
    secret: vmfhaltmskdlstkfkdgodyroqkfwkdbalroqkfwkdbalaaaaaaaaaaaaaaaabbbbb
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
    driver-class-name: org.h2.Driver
    username: sa
    password:
  h2:
    console:
      enabled: true
      path: /h2-console
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  web:
    resources:
      static-locations: classpath:/static/, file:uploads/
  mvc:
    static-path-pattern: /**
server:
  port: 8080
  servlet:
    session:
      timeout: 1800  # 30 minutes in seconds (same as SessionConst.SESSION_TIMEOUT)
      cookie:
        http-only: true
        secure: false  # Set to true in production with HTTPS
        name: JSESSIONID

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

    consumer:
      # 컨슈머들을 그룹으로 묶기 위한 ID
      group-id: cache-group # 그룹 ID는 원하는 이름으로 지정
      # 카프카에 처음 연결했을 때, 읽을 데이터가 없으면 어디부터 읽을지 결정 (earliest: 가장 처음부터)
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      # JSON 역직렬화 시 신뢰할 수 있는 패키지 설정. 보안을 위해 모든 패키지(*)를 허용하거나,
      # 특정 DTO 패키지(com.runinto.dto.*)만 지정할 수 있습니다.
      properties:
        spring.json.trusted.packages: "*"

user:
  default-profile: /images/default_profile.png
